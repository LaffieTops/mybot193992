import asyncio
import logging
import random
import os

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors import SessionPasswordNeededError

from tinydb import TinyDB, Query

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = '7744788611:AAGe2lmUsrA0U2eD4w0LU24jx6KnR0R6mfQ'
db = TinyDB("db.json")
logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())

clients = {}
sending_tasks = {}

# FSM –¥–ª—è –∑–∞–¥–µ—Ä–∂–µ–∫
class EditDelays(StatesGroup):
    waiting_for_delays = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="add_account"))
    for acc in db.table("accounts"):
        kb.add(InlineKeyboardButton(f"–ê–∫–∫–∞—É–Ω—Ç: {acc['phone']}", callback_data=f"menu_{acc['phone']}"))
    return kb

def account_menu(phone):
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç", callback_data=f"start_{phone}"),
        InlineKeyboardButton("‚èπ –°—Ç–æ–ø", callback_data=f"stop_{phone}")
    )
    kb.add(
        InlineKeyboardButton("‚úèÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"editmsg_{phone}"),
        InlineKeyboardButton("‚è± –ó–∞–¥–µ—Ä–∂–∫–∏", callback_data=f"editdelays_{phone}")
    )
    kb.add(
        InlineKeyboardButton("üìú –ß–∞—Ç—ã", callback_data=f"listchats_{phone}"),
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —á–∞—Ç—ã", callback_data=f"updatechats_{phone}")
    )
    kb.add(InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data=f"delacc_{phone}"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"))
    return kb

@dp.message_handler(commands=["start"])
async def start_handler(msg: types.Message):
    await msg.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!", reply_markup=main_menu())

@dp.callback_query_handler()
async def callback_handler(call: types.CallbackQuery):
    data = call.data
    if data == "add_account":
        await call.message.answer("–í–≤–µ–¥–∏ API ID:")
        await AddAccount.waiting_for_api_id.set()
    elif data == "back":
        await call.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())
    elif data.startswith("menu_"):
        phone = data.split("_", 1)[1]
        await call.message.edit_text(f"–ú–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞: {phone}", reply_markup=account_menu(phone))
    elif data.startswith("editmsg"):
        phone = data.split("_", 1)[1]
        await call.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        state = dp.current_state(user=call.from_user.id)
        await state.set_state("edit_message")
        await state.update_data(phone=phone)
    elif data.startswith("editdelays"):
        phone = data.split("_", 1)[1]
        await call.message.answer("–í–≤–µ–¥–∏ –∑–∞–¥–µ—Ä–∂–∫–∏ (—Å–µ–∫): <–º–∏–Ω> <–º–∞–∫—Å> <–º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏>")
        state = dp.current_state(user=call.from_user.id)
        await EditDelays.waiting_for_delays.set()
        await state.update_data(phone=phone)
    elif data.startswith("listchats"):
        phone = data.split("_", 1)[1]
        acc = get_account(phone)
        chats = acc.get("chats", [])
        text = "\n".join([f"- {c['title']}" for c in chats]) or "–ù–µ—Ç —á–∞—Ç–æ–≤"
        await call.message.answer(f"–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:\n{text}")
    elif data.startswith("updatechats"):
        phone = data.split("_", 1)[1]
        await call.message.answer("–û–±–Ω–æ–≤–ª—è—é —á–∞—Ç—ã...")
        await update_chats(phone, call.message)
    elif data.startswith("delacc"):
        phone = data.split("_", 1)[1]
        db.table("accounts").remove(Query().phone == phone)
        await call.message.answer("–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω", reply_markup=main_menu())
    elif data.startswith("start"):
        phone = data.split("_", 1)[1]
        if phone not in sending_tasks:
            task = asyncio.create_task(start_sending(phone, call.message))
            sending_tasks[phone] = task
            await call.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞.")
        else:
            await call.message.answer("–£–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.")
    elif data.startswith("stop"):
        phone = data.split("_", 1)[1]
        task = sending_tasks.pop(phone, None)
        if task:
            task.cancel()
            await call.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

class AddAccount(StatesGroup):
    waiting_for_api_id = State()
    waiting_for_api_hash = State()
    waiting_for_phone = State()
    waiting_for_code = State()

@dp.message_handler(state=AddAccount.waiting_for_api_id)
async def get_api_id(msg: types.Message, state: FSMContext):
    await state.update_data(api_id=int(msg.text))
    await msg.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ API Hash:")
    await AddAccount.next()

@dp.message_handler(state=AddAccount.waiting_for_api_hash)
async def get_api_hash(msg: types.Message, state: FSMContext):
    await state.update_data(api_hash=msg.text)
    await msg.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä:")
    await AddAccount.next()

@dp.message_handler(state=AddAccount.waiting_for_phone)
async def get_phone(msg: types.Message, state: FSMContext):
    await state.update_data(phone=msg.text)
    data = await state.get_data()
    client = TelegramClient(StringSession(), data['api_id'], data['api_hash'])
    await client.connect()
    try:
        await client.send_code_request(data['phone'])
        clients[msg.from_user.id] = client
        await msg.answer("–í–≤–µ–¥–∏ –∫–æ–¥:")
        await AddAccount.next()
    except Exception as e:
        await msg.answer(f"–û—à–∏–±–∫–∞: {e}")
        await client.disconnect()
        await state.finish()

@dp.message_handler(state=AddAccount.waiting_for_code)
async def get_code(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    client = clients.get(msg.from_user.id)
    try:
        await client.sign_in(data['phone'], msg.text)
        session = client.session.save()
        db.table("accounts").insert({
            "phone": data['phone'],
            "api_id": data['api_id'],
            "api_hash": data['api_hash'],
            "session": session,
            "message": "‚úâÔ∏è –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "delays": {"min": 40, "max": 110, "cycle": 3900},
            "chats": []
        })
        await msg.answer("–ê–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=main_menu())
        await update_chats(data['phone'], msg)
    except SessionPasswordNeededError:
        await msg.answer("–ù—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å 2FA ‚Äî –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
    except Exception as e:
        await msg.answer(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        await client.disconnect()
        await state.finish()

def get_account(phone):
    return db.table("accounts").get(Query().phone == phone)

async def update_chats(phone, msg):
    acc = get_account(phone)
    client = TelegramClient(StringSession(acc['session']), acc['api_id'], acc['api_hash'])
    await client.connect()
    chats = []
    async for dialog in client.iter_dialogs():
        if dialog.is_group or dialog.is_channel:
            chats.append({"id": dialog.id, "title": dialog.name})
    db.table("accounts").update({"chats": chats}, Query().phone == phone)
    await client.disconnect()
    await msg.answer(f"–ß–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {len(chats)}")

@dp.message_handler(state="edit_message")
async def edit_msg(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    db.table("accounts").update({"message": msg.text}, Query().phone == data["phone"])
    await msg.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    await state.finish()

@dp.message_handler(state=EditDelays.waiting_for_delays)
async def edit_delays(msg: types.Message, state: FSMContext):
    try:
        min_d, max_d, cycle_d = map(int, msg.text.strip().split())
        if min_d > max_d:
            await msg.answer("–ú–∏–Ω. –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å.")
            return
        data = await state.get_data()
        db.table("accounts").update({
            "delays": {"min": min_d, "max": max_d, "cycle": cycle_d}
        }, Query().phone == data["phone"])
        await msg.answer("–ó–∞–¥–µ—Ä–∂–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    except:
        await msg.answer("–§–æ—Ä–º–∞—Ç: 2 5 60")
    finally:
        await state.finish()

async def start_sending(phone, msg):
    acc = get_account(phone)
    client = TelegramClient(StringSession(acc['session']), acc['api_id'], acc['api_hash'])
    await client.connect()
    try:
        while True:
            acc = get_account(phone)
            success, failed = 0, 0
            for chat in acc["chats"]:
                try:
                    await client.send_message(chat['id'], acc["message"])
                    success += 1
                    await msg.answer(f"‚úÖ {chat['title']}")
                except Exception as e:
                    failed += 1
                    await msg.answer(f"‚ùå {chat['title']} ‚Äî {e}")
                d = random.randint(acc["delays"]["min"], acc["delays"]["max"])
                await asyncio.sleep(d)
            await msg.answer(f"–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω. –£—Å–ø–µ—à–Ω–æ: {success} | –û—à–∏–±–∫–∏: {failed}")
            await asyncio.sleep(acc["delays"]["cycle"])
    except asyncio.CancelledError:
        pass
    finally:
        await client.disconnect()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)